package org.bitbucket.openisoj2.core.termappiso;

import org.bitbucket.openisoj2.core.Iso8583TermApp;
import org.bitbucket.openisoj2.core.formatter.Formatters;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class TermAppIsoUnpackTests {
    @Test
    public void unpack() throws Exception {
        byte[] msgData = Formatters
                .getBinary()
                .getBytes(

        Iso8583TermApp msg = new Iso8583TermApp();
        msg.unpack(msgData, 0);
        assertEquals(Iso8583TermApp.MsgType._1210_TRAN_REQ_RSP, msg.getMsgType());
    }

    @Test
    public void unpackTwo() throws Exception {
        byte[] msgData = Formatters
                .getBinary()
                .getBytes(

        Iso8583TermApp msg = new Iso8583TermApp();
        msg.unpack(msgData, 0);
        assertEquals(Iso8583TermApp.MsgType._1210_TRAN_REQ_RSP, msg.getMsgType());
    }

    @Test
    public void unpackBinary() throws Exception {
        byte[] msgData = Formatters
                .getBinary()
                .getBytes(

        Iso8583TermApp msg = new Iso8583TermApp();
        msg.unpack(msgData, 0);
        assertEquals(Iso8583TermApp.MsgType._1210_TRAN_REQ_RSP, msg.getMsgType());
        System.out.println(msg);
    }
}
